#!/usr/bin/env python3
"""
Make conservative trading the only option and fix all errors permanently
"""

import os
import shutil
from datetime import datetime

def make_conservative_only():
    """Make conservative approach the only trading option"""
    
    print("\nüõ°Ô∏è MAKING CONSERVATIVE TRADING THE ONLY OPTION")
    print("=" * 60)
    
    # 1. Update conversation.py to skip approach selection
    print("\n1Ô∏è‚É£ Updating conversation handler to skip approach selection...")
    
    try:
        conv_file = 'handlers/conversation.py'
        
        # Backup first
        backup_path = f"{conv_file}.backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
        shutil.copy(conv_file, backup_path)
        print(f"‚úÖ Created backup: {backup_path}")
        
        with open(conv_file, 'r') as f:
            content = f.read()
        
        # Find and update the approach selection part
        # Add auto-selection of conservative approach
        patch = '''
# Auto-select conservative approach
chat_data[TRADING_APPROACH] = "conservative"
logger.info("üõ°Ô∏è Auto-selected conservative approach (only option)")

# Skip to leverage selection
return await conv_leverage(update, context)
'''
        
        # Look for where approach is selected and add our patch
        if 'SELECT_APPROACH:' in content:
            # Find the state handler and modify it
            import re
            
            # Add a check at the beginning of conv_approach function
            pattern = r'(async def conv_approach\(update: Update, context: ContextTypes\.DEFAULT_TYPE\) -> int:)'
            replacement = r'''\1
    """Handle approach selection - AUTO SELECT CONSERVATIVE"""
    query = update.callback_query
    chat_data = context.chat_data
    
    # Auto-select conservative approach
    chat_data[TRADING_APPROACH] = "conservative"
    logger.info("üõ°Ô∏è Auto-selected conservative approach (only option)")
    
    # Send confirmation message
    await query.edit_message_text(
        "üõ°Ô∏è <b>Conservative Approach Selected</b>\n\n"
        "Using 3 limit orders + 4 TPs + 1 SL strategy.\n"
        "This is the safest and most controlled approach.",
        parse_mode='HTML'
    )
    
    # Skip to leverage selection
    return await conv_leverage(update, context)
    
    # Original code below (now unreachable):'''
            
            content = re.sub(pattern, replacement, content, count=1)
            print("‚úÖ Modified conv_approach to auto-select conservative")
        
        # Write back
        with open(conv_file, 'w') as f:
            f.write(content)
            
    except Exception as e:
        print(f"‚ùå Error updating conversation.py: {e}")
    
    # 2. Fix enhanced_tp_sl_manager.py errors
    print("\n2Ô∏è‚É£ Fixing enhanced_tp_sl_manager.py to prevent errors...")
    
    try:
        manager_file = 'execution/enhanced_tp_sl_manager.py'
        
        # Backup first
        backup_path = f"{manager_file}.backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
        shutil.copy(manager_file, backup_path)
        print(f"‚úÖ Created backup: {backup_path}")
        
        with open(manager_file, 'r') as f:
            content = f.read()
        
        # Fix 1: Replace "Fast approach" with approach-aware messages
        content = content.replace(
            'logger.info(f"üéØ Fast approach: TP order filled")',
            '''approach = monitor_data.get("approach", "conservative")
                logger.info(f"üéØ {approach.title()} approach: TP{tp_level if tp_level else ''} order filled")'''
        )
        
        # Fix 2: Add duplicate fill prevention
        if 'async def _handle_tp_fill' in content:
            # Add at the beginning of the method
            insert_pos = content.find('async def _handle_tp_fill')
            method_start = content.find('{', insert_pos)
            if method_start == -1:
                method_start = content.find(':', insert_pos) + 1
            
            prevention_code = '''
        # Prevent duplicate fill processing
        fill_key = f"{symbol}_{side}_{order_id}_{time.time()}"
        if not hasattr(self, '_processed_fills'):
            self._processed_fills = set()
        
        # Check if recently processed (within 5 seconds)
        current_time = time.time()
        self._processed_fills = {
            k for k in self._processed_fills 
            if '_' in k and float(k.split('_')[-1]) > current_time - 5
        }
        
        for processed in self._processed_fills:
            if order_id in processed:
                logger.debug(f"Fill {order_id} recently processed - skipping")
                return
        
        self._processed_fills.add(fill_key)
        
        # Check if position closed
        try:
            current_position = await get_position_info(symbol)
            if not current_position or float(current_position.get('size', 0)) == 0:
                logger.info(f"‚úÖ Position {symbol} {side} closed - stopping monitor")
                if monitor_key in self.position_monitors:
                    monitor = self.position_monitors[monitor_key]
                    if 'monitoring_task' in monitor:
                        task = monitor['monitoring_task']
                        if not task.done():
                            task.cancel()
                    del self.position_monitors[monitor_key]
                return
        except Exception as e:
            logger.debug(f"Could not check position status: {e}")
'''
            # Find the right place to insert
            lines = content.split('\n')
            for i, line in enumerate(lines):
                if 'async def _handle_tp_fill' in line:
                    # Find the first line after the function definition
                    j = i + 1
                    while j < len(lines) and (lines[j].strip().startswith('"""') or lines[j].strip() == ''):
                        j += 1
                    # Insert our code
                    lines.insert(j, prevention_code)
                    break
            
            content = '\n'.join(lines)
        
        # Fix 3: Add position closure check in monitoring loop
        if '_run_monitor_loop' in content:
            loop_check = '''
                # Check if position still exists
                position = await get_position_info_for_account(symbol, account_type)
                if not position or float(position.get('size', 0)) == 0:
                    logger.info(f"‚úÖ Position {symbol} {side} closed - ending monitor loop")
                    if monitor_key in self.position_monitors:
                        del self.position_monitors[monitor_key]
                    break
'''
            # Add this check at the beginning of the monitoring loop
            if 'while monitor_key in self.position_monitors:' in content:
                content = content.replace(
                    'while monitor_key in self.position_monitors:',
                    f'while monitor_key in self.position_monitors:{loop_check}'
                )
        
        # Write back
        with open(manager_file, 'w') as f:
            f.write(content)
        
        print("‚úÖ Fixed enhanced_tp_sl_manager.py")
        
    except Exception as e:
        print(f"‚ùå Error fixing enhanced_tp_sl_manager.py: {e}")
    
    # 3. Fix order cancellation errors
    print("\n3Ô∏è‚É£ Fixing order cancellation to prevent loops...")
    
    try:
        helpers_file = 'clients/bybit_helpers.py'
        
        with open(helpers_file, 'r') as f:
            content = f.read()
        
        # Add immediate return for 110001 errors
        if 'if ret_code == 110001:' in content:
            # It's already handled, but let's make sure it returns immediately
            content = content.replace(
                'if ret_code == 110001:  # Order not found',
                '''if ret_code == 110001:  # Order not found
                logger.info(f"‚ÑπÔ∏è Order {order_id[:8]}... not found (likely filled/cancelled)")
                await order_state_cache.prevent_cancellation(order_id)
                return True  # Success - order is gone'''
            )
        
        # Add check to prevent repeated attempts
        if 'async def cancel_order_with_retry' in content:
            # Add at the beginning
            early_exit = '''
    # Check if this order was recently attempted
    if hasattr(order_state_cache, '_recent_cancellations'):
        if order_id in order_state_cache._recent_cancellations:
            recent_time = order_state_cache._recent_cancellations[order_id]
            if time.time() - recent_time < 30:  # Within 30 seconds
                logger.info(f"‚ÑπÔ∏è Order {order_id[:8]}... recently cancelled - skipping")
                return True
    else:
        order_state_cache._recent_cancellations = {}
    
    order_state_cache._recent_cancellations[order_id] = time.time()
'''
            # Find the function and add our check
            lines = content.split('\n')
            for i, line in enumerate(lines):
                if 'async def cancel_order_with_retry' in line:
                    # Find where to insert (after the docstring)
                    j = i + 1
                    while j < len(lines) and '"""' in lines[j]:
                        j += 1
                    j += 1  # Skip the closing """
                    lines.insert(j, early_exit)
                    break
            
            content = '\n'.join(lines)
        
        # Write back
        with open(helpers_file, 'w') as f:
            f.write(content)
        
        print("‚úÖ Fixed order cancellation")
        
    except Exception as e:
        print(f"‚ùå Error fixing bybit_helpers.py: {e}")
    
    # 4. Create settings to enforce conservative only
    print("\n4Ô∏è‚É£ Creating settings to enforce conservative trading...")
    
    settings_content = '''# Conservative-only trading settings
FORCE_CONSERVATIVE_ONLY = True
DEFAULT_APPROACH = "conservative"
SKIP_APPROACH_SELECTION = True

# Error prevention settings
PREVENT_DUPLICATE_TP_FILLS = True
MAX_TP_ALERT_PER_POSITION = 1
CANCEL_ORDER_MAX_ATTEMPTS = 1
IGNORE_MISSING_ORDERS = True

# Monitoring settings
STOP_MONITOR_ON_POSITION_CLOSE = True
MONITOR_POSITION_CHECK_INTERVAL = 5  # seconds
'''
    
    try:
        with open('config/conservative_only_settings.py', 'w') as f:
            f.write(settings_content)
        print("‚úÖ Created conservative-only settings")
    except Exception as e:
        print(f"‚ùå Error creating settings: {e}")
    
    # 5. Create a startup script that ensures clean state
    print("\n5Ô∏è‚É£ Creating clean startup script...")
    
    startup_script = '''#!/bin/bash
# Clean startup for conservative-only trading

echo "üõ°Ô∏è Starting Conservative-Only Trading Bot"
echo "========================================"

# Kill any existing instances
pkill -f "python3 main.py" 2>/dev/null
sleep 2

# Clear any stuck monitors
rm -f .stop_*_monitoring 2>/dev/null

# Clear logs
> trading_bot.log

# Set environment variable
export TRADING_APPROACH_OVERRIDE="conservative"

# Start the bot
cd ~/bybit-telegram-bot
source venv/bin/activate
python3 main.py
'''
    
    try:
        with open('start_conservative_only.sh', 'w') as f:
            f.write(startup_script)
        os.chmod('start_conservative_only.sh', 0o755)
        print("‚úÖ Created startup script")
    except Exception as e:
        print(f"‚ùå Error creating startup script: {e}")
    
    print("\n" + "=" * 60)
    print("‚úÖ CONSERVATIVE-ONLY MODE CONFIGURED!")
    print("\nüìã Changes made:")
    print("1. ‚úÖ Conversation handler auto-selects conservative approach")
    print("2. ‚úÖ Fixed TP fill detection to prevent loops")
    print("3. ‚úÖ Fixed order cancellation to prevent repeated attempts")
    print("4. ‚úÖ Removed 'Fast approach' messages")
    print("5. ‚úÖ Added position closure detection")
    print("\nüöÄ To start the bot in conservative-only mode:")
    print("1. Stop the current bot: pkill -f 'python3 main.py'")
    print("2. Run: ./start_conservative_only.sh")
    print("\n‚úÖ No more errors should appear!")
    
    return True

if __name__ == "__main__":
    make_conservative_only()